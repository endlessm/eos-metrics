<?xml version="1.1" encoding="UTF-8"?>

<!--
  The MIT License (MIT)

  Copyright (c) 2014 Endless Mobile, Inc.

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
-->

<node name="/com/endlessm/Metrics">

  <!--
    com.endlessm.Metrics.EventRecorderServer:
    @short_description: System daemon for recording metrics

    This interface describes the communication between EmtrEventRecorder (the
    public, app-facing, API for the metrics system) and the event recorder
    server.
    It runs as a system daemon and takes care of metrics once they leave the
    app.

    None of its methods give any indication as to whether they have succeeded;
    apps should not care about that.
  -->
  <interface name="com.endlessm.Metrics.EventRecorderServer">

    <!-- Enabled: Whether it is okay to record metrics; if not, the user has
    opted out. -->
    <property name="Enabled" type="b" access="read"/>

    <!--
      SetEnabled:
      @enabled: whether the metrics server is enabled

      Sets whether the metrics server is enabled or not. If not enabled, all
      other methods result in a no-op.

      This method sets the property "Enabled", but that property is not set with
      "readwrite" access because we need to control authorization for enabling
      or disabling the server through Polkit.
    -->
    <method name="SetEnabled">
      <arg type="b" name="enabled"/>
    </method>

    <!--
      RecordSingularEvent:
      @user_id: user ID
      @event_id: event type UUID, as an array of 16 bytes
      @relative_timestamp: relative time that the app recorded the event
      @has_payload: whether the event has a payload
      @payload: optional payload for the event

      Records an event.

      The @payload parameter is ignored if @has_payload is FALSE.
      (This is to compensate for DBus's lack of maybe types.)
    -->
    <method name="RecordSingularEvent">
      <arg type="u" name="user_id"/>
      <arg type="ay" name="event_id">
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <arg type="x" name="relative_timestamp"/>
      <arg type="b" name="has_payload"/>
      <arg type="v" name="payload"/>
    </method>

    <!--
      RecordAggregateEvent:
      @user_id: user ID
      @event_id: event type UUID, as an array of 16 bytes
      @count: number of events recorded
      @relative_timestamp: relative time that the app recorded the event(s)
      @has_payload: whether the start event has a payload
      @payload: optional payload for the start event

      Records a number (@count) of events that can later be collapsed together
      with other events of the same type.
      @count may be negative if the event is being used as a counter, for
      example.

      The @payload parameter is ignored if @has_payload is FALSE.
      (This is to compensate for DBus's lack of maybe types.)
    -->
    <method name="RecordAggregateEvent">
      <arg type="u" name="user_id"/>
      <arg type="ay" name="event_id">
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <arg type="x" name="count"/>
      <arg type="x" name="relative_timestamp"/>
      <arg type="b" name="has_payload"/>
      <arg type="v" name="payload"/>
    </method>

    <!--
      RecordEventSequence:
      @user_id: user ID
      @event_id: event type UUID, as an array of 16 bytes
      @events: array of events with timestamps and payloads

      Records a sequence of events.

      The @events parameter is represented as an array of events.
      They are expected to be in chronological order.
      Each event is a triple consisting of a 64-bit relative timestamp, a
      boolean indicating whether there is a payload, and the payload.
      The payload is ignored if the boolean is FALSE.
      (This is to compensate for DBus's lack of maybe types.)
    -->
    <method name="RecordEventSequence">
      <arg type="u" name="user_id"/>
      <arg type="ay" name="event_id">
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <arg type="a(xbv)" name="events"/>
    </method>

  </interface>
</node>
