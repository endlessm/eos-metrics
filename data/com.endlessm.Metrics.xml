<?xml version="1.1" encoding="UTF-8"?>

<node name="/com/endlessm/Metrics">

  <!--
    com.endlessm.Metrics.EventRecorderServer:
    @short_description: System daemon for recording metrics

    This interface describes the communication between EmtrEventRecorder (the
    public, app-facing, API for the metrics system) and the event recorder
    server.
    It runs as a system daemon and takes care of metrics once they leave the
    app.

    None of its methods give any indication as to whether they have succeeded;
    apps should not care about that.
  -->
  <interface name="com.endlessm.Metrics.EventRecorderServer">

    <!-- Enabled: Whether it is okay to record metrics; if not, the user has
    opted out. -->
    <property name="Enabled" type="b" access="readwrite"/>

    <!--
      RecordSingularEvent:
      @user_id: user ID
      @event_id: event type UUID, as an array of 16 bytes
      @relative_timestamp: relative time that the app recorded the event
      @has_payload: whether the event has a payload
      @payload: optional payload for the event

      Records an event.

      The @payload parameter is ignored if @has_payload is FALSE.
      (This is to compensate for DBus's lack of maybe types.)
    -->
    <method name="RecordSingularEvent">
      <arg type="u" name="user_id"/>
      <arg type="ay" name="event_id">
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <arg type="x" name="relative_timestamp"/>
      <arg type="b" name="has_payload"/>
      <arg type="v" name="payload"/>
    </method>

    <!--
      RecordAggregateEvent:
      @user_id: user ID
      @event_id: event type UUID, as an array of 16 bytes
      @count: number of events recorded
      @relative_timestamp: relative time that the app recorded the event(s)
      @has_payload: whether the start event has a payload
      @payload: optional payload for the start event

      Records a number (@count) of events that can later be collapsed together
      with other events of the same type.
      @count may be negative if the event is being used as a counter, for
      example.

      The @payload parameter is ignored if @has_payload is FALSE.
      (This is to compensate for DBus's lack of maybe types.)
    -->
    <method name="RecordAggregateEvent">
      <arg type="u" name="user_id"/>
      <arg type="ay" name="event_id">
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <arg type="x" name="count"/>
      <arg type="x" name="relative_timestamp"/>
      <arg type="b" name="has_payload"/>
      <arg type="v" name="payload"/>
    </method>

    <!--
      RecordEventSequence:
      @user_id: user ID
      @event_id: event type UUID, as an array of 16 bytes
      @events: array of events with timestamps and payloads

      Records a sequence of events.

      The @events parameter is represented as an array of events.
      They are expected to be in chronological order.
      Each event is a triple consisting of a 64-bit relative timestamp, a
      boolean indicating whether there is a payload, and the payload.
      The payload is ignored if the boolean is FALSE.
      (This is to compensate for DBus's lack of maybe types.)
    -->
    <method name="RecordEventSequence">
      <arg type="u" name="user_id"/>
      <arg type="ay" name="event_id">
        <annotation name="org.gtk.GDBus.C.ForceGVariant" value="true"/>
      </arg>
      <arg type="a(xbv)" name="events"/>
    </method>

  </interface>
</node>
